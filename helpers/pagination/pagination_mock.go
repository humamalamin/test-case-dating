// Code generated by MockGen. DO NOT EDIT.
// Source: helpers/pagination/pagination.go

// Package pagination is a generated GoMock package.
package pagination

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPagination is a mock of Pagination interface.
type MockPagination struct {
	ctrl     *gomock.Controller
	recorder *MockPaginationMockRecorder
}

// MockPaginationMockRecorder is the mock recorder for MockPagination.
type MockPaginationMockRecorder struct {
	mock *MockPagination
}

// NewMockPagination creates a new mock instance.
func NewMockPagination(ctrl *gomock.Controller) *MockPagination {
	mock := &MockPagination{ctrl: ctrl}
	mock.recorder = &MockPaginationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPagination) EXPECT() *MockPaginationMockRecorder {
	return m.recorder
}

// AddPagination mocks base method.
func (m *MockPagination) AddPagination(totalData int, page, perPage string) (*Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPagination", totalData, page, perPage)
	ret0, _ := ret[0].(*Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPagination indicates an expected call of AddPagination.
func (mr *MockPaginationMockRecorder) AddPagination(totalData, page, perPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPagination", reflect.TypeOf((*MockPagination)(nil).AddPagination), totalData, page, perPage)
}
